var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MovingLeastSquaresInterpolation","category":"page"},{"location":"#MovingLeastSquaresInterpolation","page":"Home","title":"MovingLeastSquaresInterpolation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MovingLeastSquaresInterpolation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MovingLeastSquaresInterpolation]","category":"page"},{"location":"#MovingLeastSquaresInterpolation.AbstractPointSet","page":"Home","title":"MovingLeastSquaresInterpolation.AbstractPointSet","text":"AbstractPointSet\n\nAbstract type representing a generic set of points in space.  Serves as the base type for all point set implementations.\n\n\n\n\n\n","category":"type"},{"location":"#MovingLeastSquaresInterpolation.PointSet","page":"Home","title":"MovingLeastSquaresInterpolation.PointSet","text":"PointSet{T}\n\nA flexible constructor interface for creating 1D, 2D, or 3D point sets.\n\nMethods\n\nPointSet(x::T) where {T<:Vector{<:AbstractFloat}}: Constructs a PointSet1D.\nPointSet(x::T, y::T) where {T<:Vector{<:AbstractFloat}}: Constructs a PointSet2D.\nPointSet(x::T, y::T, z::T) where {T<:Vector{<:AbstractFloat}}: Constructs a PointSet3D.\n\nExample\n\njulia> x = [1.0, 2.0, 3.0];\njulia> y = [4.0, 5.0, 6.0];\njulia> z = [7.0, 8.0, 9.0];\njulia> \njulia> ps1 = PointSet(x)       # Creates PointSet1D\nPointSet1D\n ├─ Number of points : 3\n ├─ Element type     : Float64\n └─ Point set        : [1.000000, 2.000000, 3.000000]\n\njulia> ps2 = PointSet(x, y)    # Creates PointSet2D\nPointSet2D\n ├─ Number of points : 3\n ├─ Element type     : Float64\n ├─ Point set x      : [1.000000, 2.000000, 3.000000]\n └─ Point set y      : [4.000000, 5.000000, 6.000000]\n\njulia> ps3 = PointSet(x, y, z) # Creates PointSet3D\nPointSet3D\n ├─ Number of points : 3\n ├─ Element type     : Float64\n ├─ Point set x      : [1.000000, 2.000000, 3.000000]\n ├─ Point set y      : [4.000000, 5.000000, 6.000000]\n └─ Point set z      : [7.000000, 8.000000, 9.000000]\n\n\n\n\n\n","category":"type"},{"location":"#MovingLeastSquaresInterpolation.PointSet1D","page":"Home","title":"MovingLeastSquaresInterpolation.PointSet1D","text":"PointSet1D{T}(x::Vector{<:AbstractFloat})\n\nRepresents a 1D point set with coordinates x of type T.\n\nFields\n\nx::Vector{T}: A vector of coordinates in 1D space.\n\nConstructor\n\nPointSet1D(x::Vector{<:AbstractFloat}): Creates a 1D point set, ensuring all elements in x have the same type.\n\n\n\n\n\n","category":"type"},{"location":"#MovingLeastSquaresInterpolation.PointSet2D","page":"Home","title":"MovingLeastSquaresInterpolation.PointSet2D","text":"PointSet2D{T}(x::Vector{<:AbstractFloat}, y::Vector{<:AbstractFloat})\n\nRepresents a 2D point set with coordinates x and y of type T.\n\nFields\n\nx::Vector{T}: A vector of x-coordinates in 2D space.\ny::Vector{T}: A vector of y-coordinates in 2D space.\n\nConstructor\n\nPointSet2D(x::Vector{<:AbstractFloat}, y::Vector{<:AbstractFloat}): Creates a 2D point set, ensuring:\nx and y have the same length.\nx and y have the same element type.\n\n\n\n\n\n","category":"type"},{"location":"#MovingLeastSquaresInterpolation.PointSet3D","page":"Home","title":"MovingLeastSquaresInterpolation.PointSet3D","text":"PointSet3D{T}(x::Vector{<:AbstractFloat}, y::Vector{<:AbstractFloat}, z::Vector{<:AbstractFloat})\n\nRepresents a 3D point set with coordinates x, y, and z of type T.\n\nFields\n\nx::Vector{T}: A vector of x-coordinates in 3D space.\ny::Vector{T}: A vector of y-coordinates in 3D space.\nz::Vector{T}: A vector of z-coordinates in 3D space.\n\nConstructor\n\nPointSet3D(x::Vector{<:AbstractFloat}, y::Vector{<:AbstractFloat}, z::Vector{<:AbstractFloat}): Creates a 3D point set, ensuring:\nx, y, and z have the same length.\nx, y, and z have the same element type.\n\n\n\n\n\n","category":"type"},{"location":"#MovingLeastSquaresInterpolation.cubicSplineWeight-Tuple{T} where T<:AbstractFloat","page":"Home","title":"MovingLeastSquaresInterpolation.cubicSplineWeight","text":"cubicSplineWeight(ξ::T; d::T=1.0) where {T<:AbstractFloat}\n\nComputes a cubic spline weight function with compact support. The function smoothly transitions to zero at ξ = 2d.\n\nArguments\n\nξ: Distance from the evaluation point.\nd: Support radius (default: 1.0).\n\nReturns\n\nA weight value between 0.0 and 2/3.\n\n\n\n\n\n","category":"method"},{"location":"#MovingLeastSquaresInterpolation.exponentialWeight-Tuple{T} where T<:AbstractFloat","page":"Home","title":"MovingLeastSquaresInterpolation.exponentialWeight","text":"exponentialWeight(ξ::T; d::T=1.0) where {T<:AbstractFloat}\n\nComputes an exponential weight function. The weight decays exponentially with the distance ξ.\n\nArguments\n\nξ: Distance from the evaluation point.\nd: Decay parameter (default: 1.0).\n\nReturns\n\nA positive weight value based on exponential decay.\n\n\n\n\n\n","category":"method"},{"location":"#MovingLeastSquaresInterpolation.gaussianWeight-Tuple{T} where T<:AbstractFloat","page":"Home","title":"MovingLeastSquaresInterpolation.gaussianWeight","text":"gaussianWeight(ξ::T; d::T=1.0) where {T<:AbstractFloat}\n\nComputes a Gaussian weight function. The weight decays exponentially with the squared distance ξ.\n\nArguments\n\nξ: Distance from the evaluation point.\nd: Smoothing parameter (default: 1.0).\n\nReturns\n\nA positive weight value based on the Gaussian distribution.\n\n\n\n\n\n","category":"method"},{"location":"#MovingLeastSquaresInterpolation.inverseDistanceWeight-Tuple{T} where T<:AbstractFloat","page":"Home","title":"MovingLeastSquaresInterpolation.inverseDistanceWeight","text":"inverseDistanceWeight(ξ::T; epsilon::T=1e-6) where {T<:AbstractFloat}\n\nComputes an inverse distance weight function. The weight is inversely proportional to the distance ξ, with a small epsilon to prevent division by zero.\n\nArguments\n\nξ: Distance from the evaluation point.\nepsilon: Small positive value to avoid singularity (default: 1e-6).\n\nReturns\n\nA positive weight value inversely proportional to ξ.\n\n\n\n\n\n","category":"method"},{"location":"#MovingLeastSquaresInterpolation.linearWeight-Tuple{T} where T<:AbstractFloat","page":"Home","title":"MovingLeastSquaresInterpolation.linearWeight","text":"linearWeight(ξ::T; d::T=1.0) where {T<:AbstractFloat}\n\nComputes a linear weight function with compact support. The weight decreases linearly with the distance ξ and is zero for ξ >= d.\n\nArguments\n\nξ: Distance from the evaluation point.\nd: Support radius (default: 1.0).\n\nReturns\n\nA weight value between 0.0 and 1.0.\n\n\n\n\n\n","category":"method"},{"location":"#MovingLeastSquaresInterpolation.polynomialWeight-Tuple{T} where T<:AbstractFloat","page":"Home","title":"MovingLeastSquaresInterpolation.polynomialWeight","text":"polynomialWeight(ξ::T; d::T=1.0, degree::Int64=2) where {T<:AbstractFloat}\n\nComputes a polynomial weight function with compact support. The weight is proportional to (1 - ξ/d)^degree for ξ < d and zero otherwise.\n\nArguments\n\nξ: Distance from the evaluation point.\nd: Support radius (default: 1.0).\ndegree: Degree of the polynomial (default: 2).\n\nReturns\n\nA weight value between 0.0 and 1.0.\n\n\n\n\n\n","category":"method"},{"location":"#MovingLeastSquaresInterpolation.powerWeight-Tuple{T} where T<:AbstractFloat","page":"Home","title":"MovingLeastSquaresInterpolation.powerWeight","text":"powerWeight(ξ::T; d::T=1.0, p::Int64=2) where {T<:AbstractFloat}\n\nComputes a power weight function with compact support. The weight is proportional to (1 - ξ/d)^p for ξ < d and zero otherwise.\n\nArguments\n\nξ: Distance from the evaluation point.\nd: Scaling parameter (default: 1.0).\np: Power exponent (default: 2).\n\nReturns\n\nA weight value between 0.0 and 1.0.\n\n\n\n\n\n","category":"method"},{"location":"#MovingLeastSquaresInterpolation.quarticWeight-Tuple{T} where T<:AbstractFloat","page":"Home","title":"MovingLeastSquaresInterpolation.quarticWeight","text":"quarticWeight(ξ::T; d::T=1.0) where {T<:AbstractFloat}\n\nComputes a quartic (Wendland) weight function with compact support. The weight is highly smooth and transitions to zero at ξ = d.\n\nArguments\n\nξ: Distance from the evaluation point.\nd: Support radius (default: 1.0).\n\nReturns\n\nA weight value between 0.0 and 1.0.\n\n\n\n\n\n","category":"method"}]
}
